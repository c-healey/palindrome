{"version":3,"sources":["components/SearchBar.js","components/ResultsCard.js","components/ResultList.js","components/Palindromes.js","components/App.js","index.js"],"names":["SearchBar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","className","this","type","value","onChange","e","setState","target","React","Component","ResultsCard","palindrome","ResultList","results","length","uniqueRes","Set","map","result","idx","key","isPalindrome","str","toString","split","reverse","join","hasPalindrome","pals","palin","strArr","outeridx","slice","push","App","palindromes","onInputSubmit","console","log","response","hasPalindromes","style","marginTop","ReactDOM","render","document","querySelector"],"mappings":"qMA4BeA,E,4MAzBbC,MAAQ,CAAEC,KAAM,I,EAEhBC,aAAe,SAACC,GACdA,EAAMC,iBAEN,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,uDAGvB,IAAD,OACP,OACE,yBAAKM,UAAU,cACb,0BAAMD,SAAUE,KAAKN,aAAcK,UAAU,WAC3C,6CACA,yBAAKA,UAAU,SACb,2BACEE,KAAK,OACLC,MAAOF,KAAKR,MAAMC,KAClBU,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEZ,KAAMW,EAAEE,OAAOJ,kB,GAlBtCK,IAAMC,W,OCSfC,E,kDARb,WAAYZ,GAAQ,uCACZA,G,qDAIN,OAAO,yBAAKE,UAAU,QAAQC,KAAKH,MAAMa,gB,GANnBH,IAAMC,WCuBjBG,G,MArBI,SAACd,GAClB,GAAIA,EAAMe,QAAQC,OAAS,EAAG,CAC5B,IAAMC,EAAS,YAAO,IAAIC,IAAIlB,EAAMe,UAC9BA,EAAUE,EAAUE,KAAI,SAACC,EAAQC,GACrC,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAKR,WAAYO,OAE3C,OACE,yBAAKlB,UAAU,WAAf,aACaF,EAAMe,QAAQC,OAD3B,qBACqDC,EAAUD,OAAQ,IADvE,iBAGE,yBAAKd,UAAU,eAAea,IAIpC,OACE,mHAEY,OCrBVQ,EAAe,SAACC,GASpB,OAAOA,EAAIC,aAAeD,EAAIC,WAAWC,MAAM,IAAIC,UAAUC,KAAK,KAmBrDC,EAfO,SAACL,GAIrB,IAHA,IAAIM,EAAO,GACPC,EAAQ,GACRC,EAASR,EAAIC,WAAWC,MAAM,IACzBO,EAAW,EAAGA,EAAWD,EAAOhB,OAAQiB,IAC/C,IAAK,IAAIZ,EAAM,EAAGA,EAAMW,EAAOhB,OAASiB,EAAW,EAAGZ,IACpDU,EAAQC,EAAOE,MAAMD,EAAUZ,EAAMY,GAAUL,KAAK,IAChDL,EAAaQ,IACfD,EAAKK,KAAKJ,GAKhB,OAAOD,GCDMM,E,4MAlBbzC,MAAQ,CAAE0C,YAAa,I,EAEvBC,cAAgB,SAAC1C,GACf2C,QAAQC,IAAR,+BAAoC5C,IACpC,IAAM6C,EAAWC,EAAe9C,GAChC,EAAKY,SAAS,CAAE6B,YAAaI,IAC7BF,QAAQC,IAAIC,I,uDAGZ,OACE,yBAAKvC,UAAU,eAAeyC,MAAO,CAAEC,UAAW,SAChD,kBAAC,EAAD,CAAW3C,SAAUE,KAAKmC,gBAC1B,kBAAC,EAAD,CAAYvB,QAASZ,KAAKR,MAAM0C,mB,GAbtB3B,IAAMC,WCFxBkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.9dfc1f70.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SearchBar extends React.Component {\r\n  state = { term: \"\" };\r\n  // arrow functions automatically bind this\r\n  onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.props.onSubmit(this.state.term);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui segment\">\r\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n          <label>Palindrome</label>\r\n          <div className=\"field\">\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.term}\r\n              onChange={(e) => this.setState({ term: e.target.value })}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nclass ResultsCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"item\">{this.props.palindrome}</div>;\r\n  }\r\n}\r\nexport default ResultsCard;\r\n","import React from \"react\";\r\nimport ResultCard from \"./ResultsCard\";\r\nimport \"./ResultList.css\";\r\n\r\nconst ResultList = (props) => {\r\n  if (props.results.length > 0) {\r\n    const uniqueRes = [...new Set(props.results)];\r\n    const results = uniqueRes.map((result, idx) => {\r\n      return <ResultCard key={idx} palindrome={result} />;\r\n    });\r\n    return (\r\n      <div className=\"results\">\r\n        There are {props.results.length} Palindromes with {uniqueRes.length}{\" \"}\r\n        unique results\r\n        <div className=\"result-list\">{results}</div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      Technically, no characters is a palindrome. It reads the same forward and\r\n      backward.{\" \"}\r\n    </div>\r\n  );\r\n};\r\nexport default ResultList;\r\n","const isPalindrome = (str) => {\r\n  // console.log(\r\n  //   \"isPalindrome input str\",\r\n  //   str,\r\n  //   str.toString() === str.toString().split(\"\").reverse().join(\"\")\r\n  //     ? true\r\n  //     : false\r\n  // );\r\n\r\n  return str.toString() === str.toString().split(\"\").reverse().join(\"\")\r\n    ? true\r\n    : false;\r\n};\r\nconst hasPalindrome = (str) => {\r\n  let pals = [];\r\n  let palin = \"\";\r\n  let strArr = str.toString().split(\"\");\r\n  for (let outeridx = 0; outeridx < strArr.length; outeridx++) {\r\n    for (let idx = 1; idx < strArr.length - outeridx + 1; idx++) {\r\n      palin = strArr.slice(outeridx, idx + outeridx).join(\"\");\r\n      if (isPalindrome(palin)) {\r\n        pals.push(palin);\r\n      }\r\n    }\r\n  }\r\n\r\n  return pals;\r\n};\r\nexport default hasPalindrome;\r\n","import React from \"react\";\r\n\r\nimport SearchBar from \"./SearchBar\";\r\nimport ResultList from \"./ResultList\";\r\nimport hasPalindromes from \"./Palindromes\";\r\n\r\nclass App extends React.Component {\r\n  state = { palindromes: [] };\r\n\r\n  onInputSubmit = (term) => {\r\n    console.log(`oninputsubmit term = ${term}`);\r\n    const response = hasPalindromes(term);\r\n    this.setState({ palindromes: response });\r\n    console.log(response);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"ui container\" style={{ marginTop: \"10px\" }}>\r\n        <SearchBar onSubmit={this.onInputSubmit} />\r\n        <ResultList results={this.state.palindromes} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}